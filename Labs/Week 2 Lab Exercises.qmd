---
title: "Week 2 Lab Exercises"
author: "Kelly McConvey"
date: today
date-format: "DD/MM/YY"
format: 
    pdf:
      toc: true
      number-sections: true
---

```{r}
#| message: false
library(opendatatoronto)
library(tidyverse)
library(stringr)
library(skimr) # EDA
library(visdat) # EDA
library(janitor)
library(lubridate)
library(ggrepel)
```

# TTC subway delays

This package provides an interface to all data available on the [Open Data Portal](https://open.toronto.ca/) provided by the City of Toronto.

Use the `list_packages` function to look whats available look at what's available

```{r}
all_data <- list_packages(limit = 500)
head(all_data)
```

Let's download the data on TTC subway delays in 2022.

```{r}
res <- list_package_resources("996cfe8d-fb35-40ce-b569-698d51fc683b") # obtained code from searching data frame above
res <- res |> mutate(year = str_extract(name, "202.?"))
delay_2022_ids <- res |> filter(year==2022) |> select(id) |> pull()
delay_2022 <- get_resource(delay_2022_ids)
# make the column names nicer to work with
delay_2022 <- clean_names(delay_2022)
```

```{r}
# note: I obtained these codes from the 'id' column in the `res` object above
delay_codes <- get_resource("3900e649-f31e-4b79-9f20-4731bbfd94f7")
delay_data_codebook <- get_resource("ca43ac3d-3940-4315-889b-a9375e7b8aa4")
```

```{r}
head(delay_2022)
```

```{r}
## Removing the observations that have non-standardized lines
delay_2022 <- delay_2022 |> filter(line %in% c("BD", "YU", "SHP", "SRT"))
```

```{r}
delay_2022 <- delay_2022 |> 
  left_join(delay_codes |> rename(code = `SUB RMENU CODE`, code_desc = `CODE DESCRIPTION...3`) |> select(code, code_desc)) 
delay_2022 <- delay_2022 |>
  mutate(code_srt = ifelse(line=="SRT", code, "NA")) |> 
  left_join(delay_codes |> rename(code_srt = `SRT RMENU CODE`, code_desc_srt = `CODE DESCRIPTION...7`) |> select(code_srt, code_desc_srt))  |> 
  mutate(code = ifelse(code_srt=="NA", code, code_srt),
         code_desc = ifelse(is.na(code_desc_srt), code_desc, code_desc_srt)) |> 
  select(-code_srt, -code_desc_srt)
```

```{r}
delay_2022 <- delay_2022 |> 
  mutate(station_clean = ifelse(str_starts(station, "ST"), word(station, 1,2), word(station, 1)))
```

# Lab Exercises

To be handed in via submission of quarto file (and rendered pdf) to GitHub.

1. Using the `delay_2022` data, plot the five stations with the highest mean delays. Facet the graph by `line`


```{r}
delay_2022 |>
  group_by(line, station_clean) |>
  summarise(mean_delay = mean(min_delay)) |>
  arrange(-mean_delay) |>
  slice(1:5) |>
  ggplot(aes(x = station_clean,
             y = mean_delay)) +
  geom_col() + 
  facet_wrap(vars(line), 
             scales = "free_y",
             nrow = 4) +
  coord_flip()
```

2. Using the `opendatatoronto` package, download the data on mayoral campaign contributions for 2014. Hints:
    + find the ID code you need for the package you need by searching for 'campaign' in the `all_data` tibble above
    + you will then need to `list_package_resources` to get ID for the data file
    + note: the 2014 file you will get from `get_resource` has a bunch of different campaign contributions, so just keep the data that relates to the Mayor election
    
```{r}
all_data <- list_packages(limit = 500)
res2 <- list_package_resources("f6651a40-2f52-46fc-9e04-b760c16edd5c")
campaign_2014=get_resource("5b230e92-0a22-4a15-9572-0b19cc222985")
mayor=campaign_2014$"2_Mayor_Contributions_2014_election.xls"
head(mayor)
```

3. Clean up the data format (fixing the parsing issue and standardizing the column names using `janitor`)

```{r}
mayor1 <- mayor |>
  row_to_names(row_number = 1) |>
  clean_names()

head(mayor1)
```

4. Summarize the variables in the dataset. Are there missing values, and if so, should we be worried about them? Is every variable in the format it should be? If not, create new variable(s) that are in the right format.

```{r}
skim(mayor1)
```

All of the variables are of the type character, so we'll create a new vairable for contritbution amount as type numeric.

```{r}
mayor2 <- mayor1 |>
  mutate(contribution_amount_new=as.numeric(contribution_amount))
```
Check to make sure it worked:
```{r}
skim(mayor2)
```


5. Visually explore the distribution of values of the contributions. What contributions are notable outliers? Do they share a similar characteristic(s)? It may be useful to plot the distribution of contributions without these outliers to get a better sense of the majority of the data. 

```{r}
ggplot(data = mayor2) + 
  geom_histogram(aes(x = contribution_amount_new))
```
The outliers make it impossible to read. Let's try it with a log scale:

```{r}
ggplot(data = mayor2) + 
  geom_histogram(aes(x = contribution_amount_new)) +
  scale_x_log10()
```
Looks like some significant outliers at the high end:
```{r}
mayor2 |>
  arrange(-contribution_amount_new)
```
Interestingly, all of the notable outliers are from candidates donating to their own campaigns! Doug Ford is by far the worst offender as the only candidate to donate amounts over $10,000. We'll drop those and plot it again:

```{r}
mayor3 <- mayor2 |>
  filter(contribution_amount_new<=10000)

ggplot(data = mayor3) + 
  geom_histogram(aes(x = contribution_amount_new)) +
  scale_x_log10()
```

6. List the top five candidates in each of these categories:
    + total contributions
    + mean contribution
    + number of contributions
    
    
Total Contributions:    
```{r}
mayor2 |>
  group_by(candidate) |>
  summarize(total_contribution=sum(contribution_amount_new)) |>
  arrange(-total_contribution) |>
  slice(1:5)
```

Mean Contributions:
```{r}
mayor2 |>
  group_by(candidate) |>
  summarize(mean_contribution=mean(contribution_amount_new)) |>
  arrange(-mean_contribution) |>
  slice(1:5)
```

Number of Contributions:
```{r}
mayor2 |>
  group_by(candidate) |>
  summarize(num_contribution=n()) |>
  arrange(-num_contribution) |>
  slice(1:5)
```
7. Repeat 5 but without contributions from the candidates themselves.


Total contributions:
```{r}
mayor2 |>
  filter(contributors_name != candidate) |>
  group_by(candidate) |>
  summarize(total_contribution=sum(contribution_amount_new)) |>
  arrange(-total_contribution) |>
  slice(1:5)
```
Mean Contributions:
```{r}
mayor2 |>
  filter(contributors_name != candidate) |>
  group_by(candidate) |>
  summarize(mean_contribution=mean(contribution_amount_new)) |>
  arrange(-mean_contribution) |>
  slice(1:5)
```
Number of Contributions:
```{r}
mayor2 |>
  filter(contributors_name != candidate) |>
  group_by(candidate) |>
  summarize(num_contribution=n()) |>
  arrange(-num_contribution) |>
  slice(1:5)
```
8. How many contributors gave money to more than one candidate? 
```{r}
mayor2 |>
  group_by(contributors_name) |>
  summarize(num_candidates=n_distinct(candidate)) |>
  filter(num_candidates>1) |>
  count()
```
184 contributors gave money to more than one candidate.

